// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/core/internals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

namespace {

const ::google::protobuf::Descriptor* DataLoaderCacheEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataLoaderCacheEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto() {
  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/core/internals.proto");
  GOOGLE_CHECK(file != NULL);
  DataLoaderCacheEntry_descriptor_ = file->message_type(0);
  static const int DataLoaderCacheEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, batch_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, item_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, topic_index_),
  };
  DataLoaderCacheEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataLoaderCacheEntry_descriptor_,
      DataLoaderCacheEntry::default_instance_,
      DataLoaderCacheEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataLoaderCacheEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fcore_2finternals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataLoaderCacheEntry_descriptor_, &DataLoaderCacheEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto() {
  delete DataLoaderCacheEntry::default_instance_;
  delete DataLoaderCacheEntry_reflection_;
}

void protobuf_AddDesc_artm_2fcore_2finternals_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::artm::protobuf_AddDesc_artm_2fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031artm/core/internals.proto\022\tartm.core\032\023"
    "artm/messages.proto\"\273\001\n\024DataLoaderCacheE"
    "ntry\022\022\n\nbatch_uuid\030\002 \001(\t\022\017\n\007item_id\030\003 \003("
    "\005\022\037\n\005theta\030\004 \003(\0132\020.artm.FloatArray\022\022\n\nto"
    "pic_name\030\005 \003(\t\022\020\n\010filename\030\006 \001(\t\022\022\n\nitem"
    "_title\030\007 \003(\t\022#\n\013topic_index\030\010 \003(\0132\016.artm"
    ".IntArray", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/core/internals.proto", &protobuf_RegisterTypes);
  DataLoaderCacheEntry::default_instance_ = new DataLoaderCacheEntry();
  DataLoaderCacheEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto {
  StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto() {
    protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  }
} static_descriptor_initializer_artm_2fcore_2finternals_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DataLoaderCacheEntry::kBatchUuidFieldNumber;
const int DataLoaderCacheEntry::kItemIdFieldNumber;
const int DataLoaderCacheEntry::kThetaFieldNumber;
const int DataLoaderCacheEntry::kTopicNameFieldNumber;
const int DataLoaderCacheEntry::kFilenameFieldNumber;
const int DataLoaderCacheEntry::kItemTitleFieldNumber;
const int DataLoaderCacheEntry::kTopicIndexFieldNumber;
#endif  // !_MSC_VER

DataLoaderCacheEntry::DataLoaderCacheEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataLoaderCacheEntry::InitAsDefaultInstance() {
}

DataLoaderCacheEntry::DataLoaderCacheEntry(const DataLoaderCacheEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataLoaderCacheEntry::SharedCtor() {
  _cached_size_ = 0;
  batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataLoaderCacheEntry::~DataLoaderCacheEntry() {
  SharedDtor();
}

void DataLoaderCacheEntry::SharedDtor() {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DataLoaderCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataLoaderCacheEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLoaderCacheEntry_descriptor_;
}

const DataLoaderCacheEntry& DataLoaderCacheEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DataLoaderCacheEntry* DataLoaderCacheEntry::default_instance_ = NULL;

DataLoaderCacheEntry* DataLoaderCacheEntry::New() const {
  return new DataLoaderCacheEntry;
}

void DataLoaderCacheEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_batch_uuid()) {
      if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
        batch_uuid_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
        filename_->clear();
      }
    }
  }
  item_id_.Clear();
  theta_.Clear();
  topic_name_.Clear();
  item_title_.Clear();
  topic_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataLoaderCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string batch_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_uuid().data(), this->batch_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        if (input->ExpectTag(34)) goto parse_theta;
        break;
      }

      // repeated .artm.FloatArray theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_theta;
        if (input->ExpectTag(42)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_topic_name;
        if (input->ExpectTag(50)) goto parse_filename;
        break;
      }

      // optional string filename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_title;
        break;
      }

      // repeated string item_title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_title(this->item_title_size() - 1).data(),
            this->item_title(this->item_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_title;
        if (input->ExpectTag(66)) goto parse_topic_index;
        break;
      }

      // repeated .artm.IntArray topic_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topic_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_topic_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataLoaderCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_uuid(), output);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_id(i), output);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->theta(i), output);
  }

  // repeated string topic_name = 5;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->topic_name(i), output);
  }

  // optional string filename = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filename(), output);
  }

  // repeated string item_title = 7;
  for (int i = 0; i < this->item_title_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item_title(i).data(), this->item_title(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->item_title(i), output);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->topic_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataLoaderCacheEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batch_uuid(), target);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_id(i), target);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->theta(i), target);
  }

  // repeated string topic_name = 5;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->topic_name(i), target);
  }

  // optional string filename = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // repeated string item_title = 7;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->item_title(i), target);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->topic_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataLoaderCacheEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string batch_uuid = 2;
    if (has_batch_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_uuid());
    }

    // optional string filename = 6;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated int32 item_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray theta = 4;
  total_size += 1 * this->theta_size();
  for (int i = 0; i < this->theta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->theta(i));
  }

  // repeated string topic_name = 5;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string item_title = 7;
  total_size += 1 * this->item_title_size();
  for (int i = 0; i < this->item_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_title(i));
  }

  // repeated .artm.IntArray topic_index = 8;
  total_size += 1 * this->topic_index_size();
  for (int i = 0; i < this->topic_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_index(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataLoaderCacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataLoaderCacheEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataLoaderCacheEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataLoaderCacheEntry::MergeFrom(const DataLoaderCacheEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  theta_.MergeFrom(from.theta_);
  topic_name_.MergeFrom(from.topic_name_);
  item_title_.MergeFrom(from.item_title_);
  topic_index_.MergeFrom(from.topic_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_uuid()) {
      set_batch_uuid(from.batch_uuid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataLoaderCacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLoaderCacheEntry::CopyFrom(const DataLoaderCacheEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLoaderCacheEntry::IsInitialized() const {

  return true;
}

void DataLoaderCacheEntry::Swap(DataLoaderCacheEntry* other) {
  if (other != this) {
    std::swap(batch_uuid_, other->batch_uuid_);
    item_id_.Swap(&other->item_id_);
    theta_.Swap(&other->theta_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(filename_, other->filename_);
    item_title_.Swap(&other->item_title_);
    topic_index_.Swap(&other->topic_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataLoaderCacheEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataLoaderCacheEntry_descriptor_;
  metadata.reflection = DataLoaderCacheEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

// @@protoc_insertion_point(global_scope)
